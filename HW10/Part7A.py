import matplotlib.pyplot as plt
import numpy as np
import csv

avg_data = []

t = [] # column 0
data1 = [] # column 1
data2 = [] # column 2

#Manually change which CSV youre looking at every time
with open("sigA.csv") as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        t.append(float(row[0])) # leftmost column
        data1.append(float(row[1])) # second column
        # data2.append(float(row[2])) # third column

# FOR SIGA.CSV
# From webstie: cutoff freq = 1100Hz, transition bandwidth = 1600
weights = [
    0.000289686014632741,
    0.000083691215292531,
    -0.000345884885066556,
    0.000089223775213349,
    0.000328904947014958,
    -0.000270864904887750,
    -0.000225032286352201,
    0.000426386744844721,
    0.000030195741773390,
    -0.000508642697694537,
    0.000238107823722425,
    0.000466380065980527,
    -0.000530824664478424,
    -0.000262080403764294,
    0.000766745536588251,
    -0.000105156494882147,
    -0.000846681723997131,
    0.000580647071214054,
    0.000682601457313880,
    -0.001049485848061868,
    -0.000235172818660046,
    0.001353927002153319,
    -0.000452633209540052,
    -0.001333799935936115,
    0.001240514425830348,
    0.000882122808672007,
    -0.001906137367032443,
    0.000000000000000030,
    0.002194447870078235,
    -0.001169223581462894,
    -0.001893299718626907,
    0.002344400357927687,
    0.000916441665148262,
    -0.003158486446940402,
    0.000632283493595309,
    0.003252796100301590,
    -0.002439527916304232,
    -0.002393243086909145,
    0.004025010230265105,
    0.000576541094137677,
    -0.004847115456353351,
    0.001909339167057508,
    0.004452979163988431,
    -0.004499305461207417,
    -0.002637065876450916,
    0.006451748049006367,
    -0.000437321934950724,
    -0.007023995441304261,
    0.004196763256113679,
    0.005687073406547826,
    -0.007724414406629731,
    -0.002326853787141330,
    0.009936735377755525,
    -0.002626182277643075,
    -0.009842411977425712,
    0.008185704434392467,
    0.006829597274274793,
    -0.012938933729755192,
    -0.000913308258403565,
    0.015304700668269637,
    -0.007122097174988005,
    -0.013873352530547198,
    0.015728092618869548,
    0.007755462041714013,
    -0.022747666905927333,
    0.003143618830942864,
    0.025669016822256908,
    -0.017995958040522789,
    -0.021843983719014973,
    0.035113166603226054,
    0.008358565183425058,
    -0.052199426628199215,
    0.019477002013535551,
    0.066751440071938561,
    -0.077048205955150550,
    -0.076524753453210595,
    0.308065293957620223,
    0.579762353245575346,
    0.308065293957620223,
    -0.076524753453210595,
    -0.077048205955150550,
    0.066751440071938575,
    0.019477002013535551,
    -0.052199426628199215,
    0.008358565183425060,
    0.035113166603226054,
    -0.021843983719014973,
    -0.017995958040522789,
    0.025669016822256915,
    0.003143618830942864,
    -0.022747666905927333,
    0.007755462041714013,
    0.015728092618869548,
    -0.013873352530547198,
    -0.007122097174988005,
    0.015304700668269635,
    -0.000913308258403565,
    -0.012938933729755195,
    0.006829597274274795,
    0.008185704434392468,
    -0.009842411977425710,
    -0.002626182277643076,
    0.009936735377755527,
    -0.002326853787141330,
    -0.007724414406629728,
    0.005687073406547827,
    0.004196763256113681,
    -0.007023995441304260,
    -0.000437321934950724,
    0.006451748049006369,
    -0.002637065876450917,
    -0.004499305461207416,
    0.004452979163988431,
    0.001909339167057509,
    -0.004847115456353351,
    0.000576541094137677,
    0.004025010230265105,
    -0.002393243086909146,
    -0.002439527916304232,
    0.003252796100301591,
    0.000632283493595310,
    -0.003158486446940403,
    0.000916441665148262,
    0.002344400357927687,
    -0.001893299718626908,
    -0.001169223581462895,
    0.002194447870078233,
    0.000000000000000030,
    -0.001906137367032444,
    0.000882122808672008,
    0.001240514425830349,
    -0.001333799935936115,
    -0.000452633209540052,
    0.001353927002153318,
    -0.000235172818660046,
    -0.001049485848061869,
    0.000682601457313880,
    0.000580647071214054,
    -0.000846681723997131,
    -0.000105156494882147,
    0.000766745536588252,
    -0.000262080403764294,
    -0.000530824664478424,
    0.000466380065980527,
    0.000238107823722426,
    -0.000508642697694537,
    0.000030195741773391,
    0.000426386744844721,
    -0.000225032286352201,
    -0.000270864904887750,
    0.000328904947014958,
    0.000089223775213349,
    -0.000345884885066556,
    0.000083691215292531,
    0.000289686014632741,
]

#FIR Filtering
for i in range(len(data1)):
    total=0
    for j in range(len(weights)): #Loop over the weights and apply every weight to average
        k = i-j
        if k >= 0:
            total = total + (weights[j]*data1[k])
    avg_data.append(total)

def fft_plotting(t, data1, avg_data):
    
    t =np.array(t)
    y =np.array(data1)
    y2 = np.array(avg_data)

    Fs = (len(t))/(t[-1]) # sample rate
    n = len(y) # length of the signal
    k = np.arange(n)
    T = n/Fs
    frq = k/T # two sides frequency range
    frq = frq[range(int(n/2))] # one side frequency range
    Y = np.fft.fft(y)/n # fft computing and normalization
    Y = Y[range(int(n/2))]

    FY = np.fft.fft(y2)/n # fft computing and normalization
    FY = FY[range(int(n/2))]

    fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(10,10))
    fig.suptitle(f'Unfiltered vs. FIR Cutoff=960Hz Bandwidth=1400')

    ax1.plot(t,y,color='black',label='Original Data')
    ax1.set_xlabel('Time')
    ax1.set_ylabel('Amplitude')
    ax1.legend()

    ax2.plot(t,avg_data,color='red',label='Filtered Data')
    ax2.set_xlabel('Time')
    ax2.set_ylabel('Amplitude')
    ax2.legend()

    ax3.loglog(frq,abs(Y),color='black',label='Original Data') # plotting the fft
    ax3.set_xlabel('Freq (Hz)')
    ax3.set_ylabel('|Y(freq)|')

    ax4.loglog(frq,abs(FY),color='red',label='Filtered Data') # plotting the fft
    ax4.set_xlabel('Freq (Hz)')
    ax4.set_ylabel('|Y(freq)|')
    plt.tight_layout()
    plt.show()

fft_plotting(t, data1, avg_data)
